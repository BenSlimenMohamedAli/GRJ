<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Filesystem\Filesystem;

use App\Entity\Article;
use App\Entity\Admin;

class AdminArticleController extends Controller
{
    /**
     * @Route("/admin/articles", name="admin_articles")
     */
    public function index()
    {
        return $this->render('admin_article/index.html.twig', [
            'controller_name' => 'AdminArticleController',
        ]);
    }

    /**
     * @Route("/admin/articles/add", name="admin_articles_add")
     */
    public function add(Request $request) {
        $article = new Article();

        $admin = $this->get('security.token_storage')->getToken()->getUser();
        $picture = $request->files->get('picture');
        $title = $request->request->get('title');
        $body = $request->request->get('article');
        // test the image type 
        $image_types = array("png", "jpg","jpeg");

        if (!$picture) {
            $article->setPicture('default/default.png');
        } else if (in_array(strtolower($picture->guessExtension()), $image_types)) {
            if($picture->getSize() > 2000000) {
                return new Response('4');
            }
            $picture_name = preg_replace('/\s+/', '_', $title ). $this->generateUniqueFileName() .'.'.$picture->guessExtension() ;
            $article->setPicture($picture_name);
        } else {
            // return error num 1
            return new Response('1');
        }

        $article->setAdmin($admin);
        $article->setLastModified(new \DateTime('now'));

        $article->setTitle($title);
        $article->setBody($body);

        $entityManager = $this->getDoctrine()->getManager();

        try {
            $entityManager->persist($article);
            $entityManager->flush();

            if($picture) {
                try {
                    $picture->move(
                        $this->getPicturesPath(),
                        $picture_name
                    );
                } catch (FileException $fe) { 
                    // return error num 2
                    return new Response('2');
                }
            }
        } catch(Exception $e) {
            // return error num 3
            return new Response('3');
        }
        
        // return success with 0 errors
        return new Response("0");
    }

    /**
     * @Route("/admin/articles/delete", name="admin_articles_delete")
     */
    public function delete(Request $request) {
        $filesystem = new Filesystem();

        $entityManager = $this->getDoctrine()->getManager();

        $repository = $this->getDoctrine()->getRepository(Article::class);

        $article = $repository->find($request->request->get('article_id'));

        $entityManager->remove($article);
        $entityManager->flush();
        if (strcmp($article->getPicture(), 'default/default.png')) {
            $filesystem->remove($this->getPicturesPath().'/'.$article->getPicture());
        }

        return $this->redirect('/news', 301);
    }

    /**
     * @Route("/admin/articles/update", name="admin_articles_update")
     */
    public function modify(Request $request) {

        $entityManager = $this->getDoctrine()->getManager();

        $repository = $this->getDoctrine()->getRepository(Article::class);

        $article = $repository->find($request->request->get('article_id'));

        $article->setTitle($request->request->get('new_title'));
        $article->setBody($request->request->get('new_body'));

        $entityManager->persist($article);
        $entityManager->flush();

        return new Response('1');
    }

    /**
     * 
     * util functions  :
     * getPicturesPath() 
     */

    private function getPicturesPath() 
    {
        return $this->get('kernel')->getProjectDir() . '/public/article_pictures';
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
